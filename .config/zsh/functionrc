#!/usr/bin/env bash
#~/.config/zsh/functionrc

# Functionrc is an rc file used for housing all shell functions, used in conjunction with aliasrc
# file, and sourced within zshrc file.

# Command to find where the current functionrc file is located (regardless of what it is called).
#	find $ZDOTDIR -type f | grep -E "^*.zshrc$"
# egrep "frc|function|functionrc" "$(find $ZDOTDIR -type f | grep -E "^*.zshrc$")" | sed -e '/^#.*$/d'

# Command listed below shows all the currently assigned functions. (First one displays current
# functions with parenthesis, second command/line displays just the function names.
#	grep -E '[a-zA-Z0-9]+\(\)' functionrc | sed -e 's/[{ \t]//g' -e '/^#/d'
#	grep -E '[a-zA-Z0-9]+\(\)' functionrc | sed -e 's/[{ \t]//g' -e '/^#/d' -e 's/[\(\)]//g'

# Creates the directory "/tmp/tempfiles/" if it doesn't exist already. Used in both aliasrc and
# functionrc files.
[[ ! -d /tmp/tempfiles ]] && mkdir /tmp/tempfiles

####################################################################################################
##################################### ANSI Escape Code Colors. #####################################
##################### Sets color variables for more [{( A E S T H E T I C )}] ######################
####################################################################################################
local CR='\033[1;38;5;9m'
local CB='\033[1;38;5;117m'
local CG='\033[1;38;5;10m'
local CBL='\033[3m'
local CC='\033[1;38;5;14m'			# Bold, Cyan.
local CP='\033[1;38;5;139m'			# Bold, Purple (#8700ff; rgb(135,0,255) hsl(71,100%,50%)).
local CT='\033[1;38;5;45m'			# Bold, Turquiose.
local CRE='\033[0m'					# Resets all ANSI color codes.

####################################################################################################
############################### Combination ANSI Escape Code Colors. ###############################
####################################################################################################
local CBBL=$(echo -e ${CB}${CBL})
local CRI=$(echo -e ${CR}${CBL})
local CGI=$(echo -e ${CG}${CBL})
local CPI=$(echo -e ${CP}${CBL})



# Unsets all functions in this file before redefining them.
# [WIP]

# Function to mkdir $1 and cd into it.
	mkcd(){
	    mkdir -p "$1" && cd "$1"
	}

# Alias for colored cat outputs (bat uses a man page type interface with scrolling, whereas pcat is
# just pygmentized cat standard output in the terminal).
	pcat(){
		[[ -f "$1" ]] && cat "$1" | pygmentize -f terminal256 -O style=monokai && exit 0
		pygmentize -f terminal256 -O style=monokai
	}
# Function to make `sudoedit` and `sudo -e` have propper syntaxing with filetype autodetect working.
#	function sudoedit {
#		SUDO_COMMAND="sudoedit $@" command sudoedit "$@"
#	}
# Function for using `sudo -e` just linking to sudoedit

# Function to git clone a directory, then cd into it.
	gcd(){
		git clone "$1"
		cd "$(basename "$1" .git)"
	}
# Function to easily kill screen PIDs without having to manually type them out.
	sk(){
		local SCREENPIDS="$(screen -ls | sed -e 1d -e '$d' | cut -d '.' -f 1 | tr -d '\t')"
		echo $SCREENPIDS
	}
# Changed the lx aliases into functions (certain itterations/variations on it are still just
# aliases--located in aliasrc file--but with options, so it has more flexibility and funcitonality
# like giving an option to the less command.
#	lx(){
#
#	}
# Function to print the Public IP address either currently being reported (aka, when a VPN/proxy
# connection is active and in-use), or the public/permenant IP address via a "-p" or "--permenant"
# option.
	ips(){
		#[[ "$1" =~ '[-file]' ]]
		#[[ "$1" =~ '?[--]
		#local CURRENTIP=`curl -s icanhazip.com`
		#local CURRENTIP="$(curl -s icanhazip.com)"
		curl -s icanhazip.com
#		local PRIMARYLANIP="$(ip -o -4 route get 1.1.1.1 | sed -nre \
#			"s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" -e 's/.*src ([^\ ]+).*/\1/p')"
#		local PRIMARYNIC="$(ip -o -4 route get 1.1.1.1 | sed -nr 's/.*dev ([^\ ]+).*/\1/p')"
#
#		#ALLLANIPS+=("$(sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' \
#		#	| grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')")
#
#		echo "List of all LAN IP addresses, including the primary WAN public IP address:"
#		echo "        Public ${CR}WAN${CRE} IP: [${CR}$(curl -s icanhazip.com)${CRE}]"
#		echo "Primary/Active ${CB}LAN${CRE} IP: [${CB}$PRIMARYLANIP${CRE}]" \
#			 "on ${CG}NIC${CRE}: $PRIMARYNIC ${CRE}"
		#echo "Active IP addresses on localhost are:"
		#for i in "${#ALLLANIPS[@]}"
		#do
		#	#echo "                                     [${CR}${ALLLANIPS[$i]}${CRE}]"
		#	#echo "${ALLLANIPS[$i]}"
		#	echo a
		#done


		#sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | grep -v "$(ip -o -4 route get 1.1.1.1 | sed -nre  "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" -e 's/.*src ([^\ ]+).*/\1/p')"

		# Adding these below commands here since eventually the usage of gathering IPs *SHOULD* be
		# achieved via a function for more robust capabilities and all in a single function (with
		# parameters to determine what values to return) rather than multiple aliases each
		# containing the same--or slight variation of one--command.

		# This below command displays all "ACTIVE" LAN IP addresses, omitting IP gateways, loopback,
		# netmask, etc. and only displaying active LAN IPs assigned to any/all of the localhost's
		# NICs.
		#	ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' \
		#	| grep -v '127.0.0.1' 

		# Below command gets the currently active/main NIC's LAN IP address. The second--or in the
		# ordering of how this command had to be written to ommit an additional sed-pipe
		# command--sed script strips any ANSI escape codes (in the aliasrc file, the ip command has
		# the "color" option set to always and that proves undesirable for
		# scripting/output-redirection purposes) and outputs only the active NICs LAN IP address
		# without disabling the aliasrc's ip command color option.
		#	ip -o -4 route get 1.1.1.1 | sed -nre  "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" \
		#	-e 's/.*src ([^\ ]+).*/\1/p'

		# Below is the conjoined command between the previous two commands, that displays ONLY the
		# non-main NIC LAN IP address(es), while stripping away any ANSI escape codes and outputing
		# rawtext values to STDOUT.
		#	ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' \
		#	| grep -v '127.0.0.1' | grep -v "$(ip -o -4 route get 1.1.1.1 | sed -nre \
		#	"s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" -e 's/.*src ([^\ ]+).*/\1/p')"


	}

# Function to display the active network interface.
	nic(){
		# Old method, only prints active NIC interface.
		#echo $(ip -o -4 route get 1.1.1.1 | sed -nr 's/.*dev ([^\ ]+).*/\1/p')

        ############################################################################################
		########## New method, stores variables then prints them instead of a one-liner. ###########
		############### One-liner method is prefered, but using this method for now. ###############
		##### (Once a new one-liner is made, whichever method is most efficient will be used). #####
        ############################################################################################

		# Get currently-active/in-use NIC device name.
		local DEVICE="$(ip -o -4 route get 1.1.1.1 | sed -nr 's/.*dev ([^\ ]+).*/\1/p')"
		# Get the LAN IP address of the currently-active/in-use NIC device.
		local DEVIP="$(ip -o -4 route get 1.1.1.1 | sed -nr 's/.*src ([^\ ]+).*/\1/p')"
		local WANIP=$(ips)
		echo -e "${CR}The Currently Active Network Interface is:\t${CR}[$DEVICE${CR}]"
		echo -en "${CRE}"
		echo -e "${CC}The ${CPI}LAN${CRE}${CC} IPv4 Address on that NIC is:\t\t${CR}[$DEVIP${CR}]"
		echo -e "${CC}The ${CGI}WAN${CRE}${CC} IPv4 Address on that NIC is currently:" \
			"\t${CR}[${CG}${WANIP}${CR}]"

		#echo -e "${CGREEN}Active Network Interface is:     ${CRED}[$DEVICE${CRED}]"
		#echo -e "${CCYAN}The IP Address on ${CRED}[$DEVICE${CRED}]${CCYAN} is: ${CRED}[$DEVIP${CRED}]"
	}

# Colorization aliases.
	pycolor(){
		[[ -f "$1" ]] && pygmentize -f terminal256 -O style=monokai -g "$1" && exit 0
		[[ ! -f "$#" ]] && pygmentize -f terminal256 -O style=monokai -g -
	}

# Colorized Listing of the physical hard drive device, physical volume, volume group, and logical
# volume groups.
	disks(){
		# (This below command is no longer used since it does not account for LVMs, and this system
		# is installed on an LVM partition scheme, as well as multiple other LVM partitions).
		#		sudo parted -l | head -9 | pcat
		# Checks if root. Exit if not.
		#[[ "$EUID" -ne 0 ]] && echo -e "Please run this script as root/sudo.\nDoing nothing..." && return 1

		#sudo fdisk -l | sed -n -e '/\/dev\/sd[a-z]:/,/^$/p'
		#echo -e "\n\033[1;38;5;25m\t""Physical Volumes:"
		#	sudo pvs | sed -re 's/^[\t ]+PV[\ \t]+(.*)/Physical Volumes:\t\   \1/' -e 's/^[\t ]+(.*)/\t\t\1/'
		echo "#####################################################################################"
		echo "#### Physical Partitions and Storage/Block Devices (Only real/non-logical here): ####"
		echo "#####################################################################################"
		echo
		sudo fdisk -l /dev/sd[a-z] 2>/dev/null
		echo -e "\n\n"
		echo "#####################################################################################"
		echo "######## Physical Volumes (PVs), Volume Groups (VGs), Logical Volumes (LVMs): #######"
		echo "#####################################################################################"
		echo
		echo "Physical Volumes:"
		sudo pvs #| sed 's/'
		#echo -e "\n\033[1;38;5;205m\t""Volume Groups:"
		#echo -e "\n\033[1;38;5;205m\t""Volume Groups:"
		echo "Volume Groups:"
		sudo vgs
		#echo -e "\n\033[1;38;5;177m\t""Logical Volume Partitions:"
		#echo -e "\n\033[1;38;5;177m\t""Logical Volume Partitions:"
		echo "Logical Volumes:"
		sudo lvs
	}
	# Alias to pipe the entire contents of disks() function through pcat alias.
	alias disks='disks | plx'

# Function to display only the hidden files/folders. $1 argument can dictate whether or not to only
# show <-f|--files> or <-F|--folders>
	lh(){
		[[ -z "$@" ]] && ls -a | grep '^\.'
		if [[ "$#" -gt 1 ]]
		then
			[[ -d "$@" ]] && ls -a "$@" | grep '^\.'
		fi
	}

# Function to more easily add gpg keys (this is mainly so I don't have to remember the entire
# command and can just feed keys into this function.
	getaptkeyf(){
		# Checks if at least one argument is given, exits if not.
		[[ -z "$@" ]] && echo "Must specify keys to be added." && exit 1

		# Checks if the script version of this function is present. If found, forward the arguments
		# given to this function to the script; if not then continue running this function and
		# assume all argument parameters are all PUBKEY's requiring validation and importing.
		[[ -f "/usr/local/bin/getaptkey" ]] && \
			echo "The script file for this function has been found. Forwarding the arguments" \
			"from this function to the script." && echo && sudo /usr/local/bin/getaptkey "$@" \
			&& exit 0
		sudo apt-key adv --keyserver keys.gnupg.net --recv-keys "$@"
	}
# Function to redo previous command, but as sudo. ("Brute-force" method of doing this utilizing the
# history file so it can function independently of the shell limitations/syntaxing).
	ss(){
		# This works independently of the shell being used; appears to not work if testing in shell
		# scripts since shell scripts are run in their own sub-shells and therefore have their own
		# history lists.
		[[ "$@" ]] && sudo "$@" && return 0
		
		# Backticks must be used rather than a shell substitution with "$(<COMMAND>)" in conjunctio
		# with an eval command on the variable.
		lastcmd="`history | sed -e 's/^[0-9 ]*[ ]//' -e '$!d'`"
		# A "-s" option must be specified to sudo to keep the current shell variables/environment.
		sudo -s eval "$lastcmd"
	}

# Function to make running programs that would normally take over a shell session go to background
# and disown them so the shell the program was opened with can close without closing the program.
	q(){
		# Verify there are arguments (a command) to be run and disowned. Exit if not.
		[[ -z "$@" ]] && echo -e "No command specified to be hidden and disowned.\nExiting..." \
			&& return 1

		# Assign the raw output (omitting STDERR if file-not-found to avoid logic-error) to a
		# variable that contains the absolute path of the command/program/script tryign to be
		# executed.
		PROGRAMPATH=`which $1` 2>/dev/null

		# Checks if the first argument passed to this function is a script/program/executable-file
		# before continuing and exits if not; if so, then every variable/string/word proceeding the
		# first argument is treated as options for that specific program.
		# ("-f" is shorthand for check-if-file-exists, "-x" checks if file exists and is executable).
		[[ ! -f "$PROGRAMPATH" ]] && echo -e \
			"Program/script \"$1\" has no path, therefore cannot be located.\nExiting..." && exit 1

		# This line below with the written sequence of routing to /dev/null and "& disown" is the
		# proper order and program syntax to send all STDOUT (like shell output log from a QT
		# application like nicotine++) to /dev/null and frees up the shell.
		# (A method that allows for tab_auto-completion with this function is greatly desired but
		# for the time being [10-5-2020 5AM]).
		[[ "$PROGRAMPATH" ]] && shift 1 && "$PROGRAMPATH" "$@" &>/dev/null & disown

		# Commenting these lines below out for testing (10-5-2020 5AM).
		#	[[ "$@" ]] && eval "$@" &>/dev/null & disown
		#	[[ "$@" ]] && eval "$@" &>/dev/null
		#	[[ "$@" ]] && eval "$@" & disown #&>/dev/null
	}


# Functions for pandoc conversions used in conjunction with aliases from aliasrc file.
	pdocconv(){
		# Checks if function is called to convert Markdown to PDF.
		[[ "$1" == "md2pdf" ]] && CONVTYPE="md2pdf"
		[[ ! -f "$2" ]] && echo -e "${CR}$2${CRE} not a file." && exit 1
		FILENAME="$3"
		[[ -z "$3" ]] && FILENAME="$(echo "$2" | cut -f 1 -d '.').pdf"
		pandoc "$2" --pdf-engine=pdfroff -o "$FILENAME"

	}

# Function to open a vim file titled as the date+time in the directory /tmp/tempfiles. Just for
# easier access to these files (despite the whole point of this function being to quickly create a
# file typically to test something out) an environment variable will be set to the last opened file
# opened with this function. Also an option to display a list of files in this directory and their
# last modification date and time.
#	vtmp(){
#		export LASTVTMPFILE="/tmp/tempfiles/`date "+%m-%d-%Y_%H-%M-%S"`"
#	}

# Function to create a bzip2 tar file while utilizing pbzip2 (a bzip2 program that utilizes
# multithreading/parallel-processing for faster times; if pbzip2 isn't installed, use bzip2; if
# bzip2 is missing, use XZ since LZMA is rather standard for Linux archives). This function also
# parses arguments passed to it as options to choose the compression method or (TODO) use a
# curses/ncurses progress window.
# USAGE: "tarp {TAR-FILENAME} {FILE(S) or DIRECTORY}"
	tarp(){
		# Checks that valid (this check specifically checks for ANY) input was received.
		[[ "$#" ]] && echo -e "${CR}Either invalid or no arguments passed." \
			"\n${CG}Read the description of this function in the functionrc file." \
			"\n${CR}Doing nothing and Exiting..." && exit 1

		# Checks that both variables are valid files/directories.
		for i in "$@"
		do
			[[ ! -f "$i" && ! -d "$i" ]] && echo -e "${CR}Invalid file/directory variable:\"$i\"" \
				"given." && return 1
		done

		# Checks if pbzip2 is installed, prefer that over bzip2 if installed. 
		local COMPMETHOD="pbzip2 -9"
		[[ ! "$(command -v "pbzip2")" ]] && local COMPMETHOD="bzip2 -9"
		# Checks that pv is installed, exit if it isn't installed.
		[[ ! "$(command -v "pv")" ]] && \
			echo -e "${CR}WARNING!!!\n${CRE}Command \"${CG}pv${CRE}\" not found, therefore," \
			"\n${CR}Exiting..." && return 1

		# Executing the compression and using the program pv and du to show a progress line.
		tar cf - "$2" -P | pv -s $(du -sb "$2" | awk '{print $1}') | eval $COMPMETHOD > "$1"
	}

# Function to show progress deletion of files using rsync (or perl since it's benchmarks are faster;
# only used if perl is installed/useable). This function is useful for when deleting large
# directories and/or directories with a very large amount of files of small/average size but the
# sheer amount of files causes a slow execution).
	rmf(){
		# Check for which program to use. Use rm command if neither perl nor rsync are accessible.
		[[ ! "$(command -v "perl")" ]] && local USERSYNC=1
		[[ ! "$(command -v "rsync")" ]] && unset USERSYNC && local USERM=1
		# Temporarily adding this line below to manually set function to use rm.
		local USERM=1

		# Checks that the arguments passed to this function are valid files/directories.
		for i in "$@"
		do
			[[ ! -f "$i" && ! -d "$i" ]] && echo "Invalid file/directory: \"$i\"\nExiting..." \
				&& exit 1
		done

		# Perform the command based on whichever method is available.
		if [[ $USERM ]]
		then
			rm -rvf "$1" | pv -s $(du -sb "$1" | awk '${print $1}')
		elif [[ $USERSYNC ]]
		then
			mkdir empty_dir
			rsync -av --stats --human-readable --delete empty_dir/ "$1" \
				| pv -s $(du -sb "$1" | awk '${print $1}')
			rm -r empty_dir
		#elif [[ -z $USERSYNC && -z $USERM ]]
		fi

	}

# Simple function to remove ANSI Escape code colors.
# Useful for when piping output of a command into another command like sed or grep and both of those
# commands take the literal text output (including ANSI escape codes that display in the terminal as
# colored or stylized text, but in the program examples listed above, the escape codes are
# interpreted literally).
	nocolor(){
		# Uses /dev/stdin to read from standard input.
		if (( $# == 0 ))
		then
			'sed "s/\x1b\[[0-9;]*m//g"' < /dev/stdin
		else
			'sed "s/\x1b\[[0-9;]*m//g"' <<< "$1"
		fi
	}


## Function to download YouTube Music/Videos, Soundcloud, etc. via youtube-dl utility.
#	ytdl(){
#		# Checks for arguments passed to function. Exit if none.
#		[[ -z "$@" ]] && echo "No arguments or links specified. Exiting..." && return 1
#
#		# Defines regex to variable to verify a proper URL link.
#		local REGEXRULES='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
#		if [[ "$1" =~ [-m|--music] ]]
#		then
#			local CFGDIR="~/.config/youtube-dl/mconfig"
#		elif [[ "$1" =~ [-v|--video] ]]
#			local CFGDIR="~/.config/youtube-dl/config"
#		elif [[ -z "$1" ]] 
#			echo "Defaulting to Video-download mode..."
#			sleep 2
#			local CFGDIR="~/.config/youtube-dl/config"
#		elif [[ "$1" =~ $REGEXRULES ]]
#			local SKIP=1
#			echo "Defaulting to Video-download mode..."
#			sleep 2
#			local CFGDIR="~/.config/youtube-dl/config"
#		else
#			echo
#			echo "Invalid function argument given."
#			echo "Available options are: [-m|--music] or [-v|--video]"
#			echo
#			echo "[Optionally include URLs encapsulated in quotation marks]"
#			echo "[If no URL(s) are specified, a while loop will run where you can input each link]"
#			return 1
#		fi
#
#		# If the SKIP variable is set, that means that straight URL's have been passed to the
#		# function, and will exclude the first parameter/argument; otherwise the LINKLIST array
#		# will be set to skip the first element in the argument-list ("$@").
#		LINKLIST=("${@:1}")
#		[[ $SKIP == 1 ]] && local LINKLIST=("${@:2}")
#
#		# If only one function parameter is passed without any URLs, this while loop will accept
#		# input from the user and every space will be treated as a delimiter and each entry will be
#		# added as a string to LINKLIST.
#		if [[ "$#" -le 1 ]]
#		then
#			echo "Please enter the URL(s) of the Links you would like to download, each URL seperated by a space.\n[Press <Enter> key when finished]:\n"
#			while :;
#			do
#
#
#
#		# Loop that downloads every link provided in arguments after 
#		youtube-dl --config-location "$CFGDIR"
#	}

# Function to open a new file in /tmp/ directory, uses the first argument as the filename under
# /tmp/ directory, if the argument is a file that already exists, return a warning and append a
# number to the end.
#	tmpba(){
#		local TMPBASH='/tmp/bashscripts/'
#		[[ ! -d "${TMPBASH}" ]] && read -r -n 1 "$(echo -e "${CR}No directory: " \
#			\"${CB}${TMPBASH}${CR}\" exists.\nWould you like to create it now: [Y/n]: " )" CHOICE
#		[[ -e "$CHOICE" && ! "$CHOICE" =~ '[y|Y|n|N]' ]] && echo "Invalid choice. Exiting..." \
#			&& return 1
#		#if [ -f "$1" ]
#		#then
#		#	echo "File exists. Would you like to overwrite it or 
#		#	while ;:
#		#	do
#
#		#"$EDITOR" -c "bh"
#	}

# Reconnects to running tmux session; if multiple sessions found, list them and prompt for input on
# which to connect to.
#	Broken for right now. Will fix later.
#tmr(){
#	#tmux attach-session
#	tsessions="$(tmux list-session | wc -l )"
#	if [ "$tsessions" -gt 1 ]
#	then
#		tnum=0
#		while [[ ! $tnum =~ ^[0-9]{1,} || $tnum -lt $tsessions ]]
#		do
#			echo -e "${CR}There are multiple tmux sessions.${CRE}"
#			tmux list-sessions
#			echo -ne "${CR}Select which to attach to: ${CG}"
#			read tnum
#			echo
#			echo -e "${CR}Invalid Option: ${CBBL}$tnum${CRE}"
#		done
#		tmux attatch-session -t $tnum
#	fi
#}
