#!/usr/bin/env bash
# bin/ezgit

# This script may perhaps be just a tad bit overengineered, but it automates not only making backups
# of the remote git repo to both the local machine running the script, but as well as to the remote
# git repo.
# Although overengineered a bit, it provides functionality for everything I may want and has proven
# to be very useful in both bootstrapping new machines, and merging changes between the two.
# (Also the more overengineered parts of the script were implemented as a learning experience for learning
# shell scripting and general programming experience, hence the sometimes unnecessary usage of functions.
#	TO-DO:
#		1.) Implement an automated GUI environment (preferably a nvim based program that
#		highlights discrepancies between versions of files.)
#		2.)

# Exits the script when an error is encountered to prevent potential damage from continuing to run.
### Commenting this out for the time being until I figure out/take the time to omit certain directories such 
# as neovim plugins since they're causing permission denied errors and causing the script to exit prematurely.
#set -e

# Library containing all of the package dependencies for both the script as well as the
# dotfile/config files for my setup.
DEPENDS=(	"git" \
			"fzf" \
			"tmux" \
			"neovim" \
			"openssh" \
			"neomutt" \
			"zsh" \
		)

# Defines a list of files/folders to be deleted from the local directory before adding the contents
# of the pwd to git staged changes.
EXCLUSIONS=(	"*.swp" \
				".config/BraveSoftware" \
				".config/transmission" \
				".config/Bitcoin/Bitcoin-Qt.conf" \
				".config/ranger/bookmarks" \
				".config/ranger/history" \
				".config/chromium" \
				".config/mpd/pid" \
				".config/mpd/state" \
			)
			
# Just a list of all the dotfiles, might integrate into some sort of parsing for auto git syncing.
FILELIST=(	".config/" \
			# "bin/" \				# Commenting this out so it doesn't copy to $HOME dir.
			".fzf" \
			".emacs.d/" \
			#"$HOME/.local" \
			".nvim" \
			".oh-my-zsh" \
			".terminfo" \
			".vim" \
			".Xresources.d" \
			".bashrc" \
			".fzf.bash" \
			".fzf.zsh" \
			".profile" \
			".tmux.conf" \
			#".Xauthority" \		# Commenting this out because of discrepancies between machines.
			".xinitrc" \
			".Xresources" \
			".zshenv" \
			".zshrc" \
		)

# Function/command to print out the FILELIST library, sort it into alpahbetical order, then encapsulate in quotes
# and adds a space and backslassh at the end of each line for better formatting.
sortFILELIST(){
	test1=$(echo ${FILELIST[@]} | tr ' ' '\n' | sed -e 's/\(.*\)/"\1"/' -e 's/$/\ \\/')
	test2=($(echo ${FILELIST[@]} | sort -d -i -b | tr ' ' '\n' | sed -e 's/\(.*\)/"\1"/' -e 's/$/\ \\/'))
	test3=$(echo ${FILELIST[@]} | sort -d -i -b | tr ' ' '\n' \
		| sed  -e 's/\(.*\)/"\1"/' -e 's/^/\t\t\t/' -e 's/$/\ \\/')
	test4="$test3"
	#test2=(
	#echo -n > /tmp/testingformatting
	echo "$test3" > /tmp/testingformatting
	#echo
	#echo ${test2[@]} > /tmp/testingformatting
	#echo $test3
	#echo $test3 > /tmp/testingformatting
	#echo
	#echo ${FILELIST[@]}
	#diff <(echo "$test1") <(echo "$test2")
}
#sortFILELIST
#cat /tmp/testingformatting
#echo "$test3"
#exit 1

# Define ANSI escape sequence color code variables.
CRESET='\033[0m'
CRED='\033[1;38;5;9m'
CGREEN='\033[1;38;5;10m'
CBLUE='\033[1;38;5;81m'
CULINE='\033[4m'

# Get current date and time for timestamp on logged archives.
DATE="$(date "+%m-%d-%Y")"
TIME="$(date "+%H-%M")"

# Assign directory for both remote repo and local dotfiles for bzip2 tarballs to be stored within the local
# dotfile directory.
LOCALBACKUPS="/tmp/BACKUPS/Local/$DATE"
REMOTEBACKUPS="/tmp/BACKUPS/Remote/$DATE"

# Creates the directories for both remote git repository and local dotfiles to be held in bzip2 tarballs.
[ ! -d "$LOCALBACKUPS" ] && mkdir -p "$LOCALBACKUPS"
[ ! -d "$REMOTEBACKUPS" ] && mkdir -p "$REMOTEBACKUPS"

# Defines a function to sleep for X seconds as first argument passed to it, and as a second argument
# print whatever text before the counter.
SLEEPFORX(){
	for i in `seq $1 -1 1`
	do
	    #echo -ne "\r$CRED$i"
	    echo -ne "\r$2 $CRED$i"
	    sleep 1
	    i=$((i-1))
	done
	echo -e $CRESET
	sleep 1
}


 case "$1" in
 	-i | --install)
		# Change current git dir
		echo -ne $CRED && git init && echo -en $CRESET

		echo "Creating bzip2 tarbal archive of local git repo directory (pwd) in: "
		SLEEPFORX 5 "${CBLUE}$LOCALBACKUPS/local_git_dotfiles-$TIME.tar.bz2"

		# Updated this to include a slider progress bar via pv command and awk.
		tar -cf - --exclude='BACKUPS' --exclude='*.swp' . | pv -s $(du -sb . | awk '{print $1}') | \
			bzip2 > "$LOCALBACKUPS/local_git_dotfiles-$TIME.tar.bz2"
 		echo

 		echo "Now creating a bzip2 tarball of config files in-use on this machine for backup in: "
		SLEEPFORX 5 "${CBLUE}$LOCALBACKUPS/`hostname`-$TIME.tar.bz2"
 		tar -cjf "$LOCALBACKUPS/`hostname`-$TIME.tar.bz2" "${FILELIST[@]}"

 		echo "Tarballs of both the local repo before updating, as well as the config files that"
		echo -e "were currently in-use on this system created and located in: \
			${CRED}$REMOTEBACKUPS${CRESET} directory."
		echo
		sleep 5
		echo "Syncing with remote git repo, then installing..."
		git pull origin master
		echo
 		for i in "${FILELIST[@]}"
 		do
 			cp -r "$i" "$HOME/"
 		done
		echo "Dotfiles installed, exiting..."
		exit 0
 		;;

 	-u | --upload)
		# Change current git dir
		echo -ne $CRED && git init && echo -en $CRESET
 		echo "Before uploading, the remote repo will be downloaded, compressed, and located at:"
		#echo -e "$CBLUE$REMOTEBACKUPS/Remote-Repo-$TIME.tar.bz2" && SLEEPFORX 5
		SLEEPFORX 5 "$CBLUE$REMOTEBACKUPS/Remote-Repo-$TIME.tar.bz2"

		# Clone the remote git repository into the Remote backups directory, then create a bzip2
		# archive of it and delete the cloned folder.
		git clone https://github.com/Projohnston/dotfiles.git "$REMOTEBACKUPS/dotfiles-$TIME"
 		tar -cjf "$REMOTEBACKUPS/Remote-Repo-$TIME.tar.bz2" "$REMOTEBACKUPS/dotfiles-$TIME" \
			&>/dev/null
		yes | rm -r "$REMOTEBACKUPS/dotfiles-$TIME"

		# Copies all of the files recursivley that are listed in the FILELIST array variable.
 		for i in "${FILELIST[@]}"
 		do
 			cp -rf "$HOME/$i" .
 		done

		# Reinitialize git directory silently.
		git init &> /dev/null
		# Adds everything currently in directory to be staged in commit.
		git add -A .

		# Removes everything in the EXCLUSIONS list defined at the top of this script.
		for i in "${!EXCLUSIONS[@]}"
		do
			git rm -rf "${EXCLUSIONS[$i]}"
		done

		#git rm -rf .config/BraveSoftware
		#git rm -rf .config/transmission
		#git rm -rf .config/Bitcoin/Bitcoin-Qt.conf
        #git rm -rf .config/ranger/bookmarks
        #git rm -rf .config/ranger/history
        #git rm -rf .config/chromium
		#git rm *.swp

		git status
		# Using a while loop again to force y/n.
		while [[ "$yn" != "y" && "$yn" != "n" ]]
		do
			read -n 1 -p "$(echo -e Are the git status changes ok? \
				["$CRED"y"$CRESET"/"$CRED"n"$CRESET"]: ) " yn;

			# Sanitizing the read command input.
			yn="$(echo $yn | tr '[:upper:]' '[:lower:]')"
			echo
			
			# Exit if user selects "[n]o" to committing the changes.
			[[ "$yn" == "n" ]] && echo -e \
				"${CRED}Changes staged for commit have been made, but not committing.\nExiting..." \
				&& exit 1
		done
		read -p 'Name the commit: ' commitdesc
		git commit -m "$commitdesc"
		git push origin master
		echo
		echo -e "${CGREEN}Successfully uploaded to git repo."
		echo
		exit 0
 		;;

	-d | --diff)
		echo "Prints difference between local and remote repos."
		git diff --stat --patch origin master
		;;

	*)
		echo -e "${CGREEN}Usage: ${CRED}./ezgit [ACTION]"
		echo
		echo -e "${CGREEN}ACTIONS:"
		echo -e "	${CRED}-i | --install${CBLUE}	Pulls from remote git repo and installs/updates local files."
		echo 
		echo -e "	${CRED}-u | --upload${CBLUE}	Pulls remote repo to create a backup bz2 tarball, then uploads"
		echo -e "			files listed in the ${CGREEN}FILELIST${CBLUE} array list to github repo."
		echo 
		echo -e "	${CRED}-d | --diff${CBLUE}	Runs a '${CRED}git diff${CBLUE}' command between local and remote repo."
		echo
		echo -e "${CGREEN}TODO: ${CBLUE}Implement a function to compare remote and local files, for intelligent error protection"
		echo -e "		rather than just creating archives of the whole repo."
		echo
		exit 0
		;;
esac
