# use C-a, since it's on the home row and easier to hit than C-b

set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 1

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi is good
setw -g mode-keys vi


# Everything commented out and indented was supposedly working fine, trying a fix listed here:
# 			https://github.com/rakr/vim-one
#	# Appending this since tmux likes to break neovim colors. The second line is what solved the issue
#	# Changing these two lines to use 24bit colors instead of the 256.
#	####### [ THESE SETTINGS WERE ACTIVE AND WORKING ] #########
#		#		set -g default-terminal "screen-256color"
#		#		set -ga terminal-overrides ",*256color*:Tc"
#	# Setting truecolor support setting default terminal to xterm-24bit
#	# Commented out while trying a fix for KiTTY.
#	#set -g default-terminal "xterm-24bit"
#	#set -ag terminal-overrides ',xterm-kitty:Tc'
#	# Possible fix for SIXEL support within tmux.
#		#set -ga terminal-overrides ',xterm*:smglr=\E7\E[?69h\E[%i%p1%d;%p2%ds\E8:mgc=\E7\E[?69l\E8'
#	# Adding this 4-15-20 from a reddit thread saying it works for mintty true color support.
#		#set -g default-terminal "tmux-256color"
#		#set-option -ga terminal-overrides ",xterm*:Tc"
# Add truecolor support
#set-option -ga terminal-overrides ",xterm-256color:Tc"
# Default terminal is 256 colors
#set -g default-terminal "screen-256color"

# ！！！importent！！！ 开启24 bit color 其他方式都无效
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"


# Enable terminal compatability.
# set-option -ga terminal-overrides ",tmux-256color-italic:Tc,xterm-256color-italic:Tc"

# mouse behavior
# (not working on NAS.
#
#		setw -g mode-mouse on
#		set -g mouse-select-pane on
#		set -g mouse-resize-pane on


bind-key : command-prompt
bind-key r refresh-client
bind-key l clear-history

# Commenting this out for now based on this supposed solution for using <C-Tab>.
# https://github.com/mintty/mintty/wiki/Tips#switch-pane-in-tmux
#set -s user-keys[0] "\e[1;5I"
#set -s user-keys[1] "\e[1;6I"
#bind-key -n User0 next-window
#bind-key -n User1 previous-window
bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key C-h select-pane -L
bind-key C-j select-pane -D
bind-key C-k select-pane -U
# Manually re-assigning the move active-window right binding, since it broke C-L
# default TTY keybind for clearing the screen.
bind-key C-l select-pane -R

# Rebinding window split bindings to be more intuitive.
bind-key s split-window -h
bind-key v split-window -v

# Binding <C-Tab> and <C-Shift-Tab> to cycling through windows. (Testing, may not be in installed version)
# Doesnt work on v3.0a however haven't fiddled with it much.
#	bind-key -n	C-Tab	next-window
#	bind-key -n	C-S-Tab	previous-window

# Binding <C-M-h> and <C-M-l> to cycle-window left/right.
# bind-key C-M-h previous-window

# Binding Control + vim-movement-keys to resizing windows.
bind-key -r  C-y resize-pane -L
bind-key -r  C-u resize-pane -D
bind-key -r  C-i resize-pane -U
unbind-key   C-o
bind-key -r  C-o resize-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer

# Vim keybind settings that idk what they do, but they're borken.
# Currently broken, possibly because of enabling testing branch of apt(?)
# Version 2.6 presented more errors than current version (3.0a)
        # Setup 'v' to begin selection as in Vim
        #   bind-key -t vi-copy v begin-selection
        #bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

        # Update default binding of `Enter` to also use copy-pipe
        #unbind -t vi-copy Enter
        #bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

set-window-option -g display-panes-time 1500

# Status Bar
set-option -g status-interval 1
set-option -g status-left ''
set-option -g status-right '%l:%M%p'
set-option -g status-style 'fg=colour237'
#set -g status-left '#[bg=#f8f8f2]#[fg=#282a36]

# This option specifies statusbar color
set-window-option -g window-status-current-style 'fg=colour045,bg=colour237'

# Status Bar solarized-dark (default)
set-option -g status-style 'fg=colour033,bg=colour237'
set-option -g pane-active-border-style 'fg=colour033'
set-option -g pane-border-style 'fg=colour240'

# Status Bar solarized-light
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white"

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Enable native Mac OS X copy/paste
set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0


# Fixes the delay when leaving insert mode in vim while in a tmux session.
set -sg escape-time 0



# Testing various status settings.
